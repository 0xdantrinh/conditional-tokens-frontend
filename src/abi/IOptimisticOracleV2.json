{
  "abi": [
    {
      "type": "function",
      "name": "defaultLiveness",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "disputePrice",
      "inputs": [
        { "name": "requester", "type": "address", "internalType": "address" },
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [
        { "name": "totalBond", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getRequest",
      "inputs": [
        { "name": "requester", "type": "address", "internalType": "address" },
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct Request",
          "components": [
            {
              "name": "proposer",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "disputer",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "currency",
              "type": "address",
              "internalType": "contract IERC20"
            },
            { "name": "settled", "type": "bool", "internalType": "bool" },
            {
              "name": "requestSettings",
              "type": "tuple",
              "internalType": "struct RequestSettings",
              "components": [
                {
                  "name": "eventBased",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "refundOnDispute",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "callbackOnPriceProposed",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "callbackOnPriceDisputed",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "callbackOnPriceSettled",
                  "type": "bool",
                  "internalType": "bool"
                },
                {
                  "name": "bond",
                  "type": "uint256",
                  "internalType": "uint256"
                },
                {
                  "name": "customLiveness",
                  "type": "uint256",
                  "internalType": "uint256"
                }
              ]
            },
            {
              "name": "proposedPrice",
              "type": "int256",
              "internalType": "int256"
            },
            {
              "name": "resolvedPrice",
              "type": "int256",
              "internalType": "int256"
            },
            {
              "name": "expirationTime",
              "type": "uint256",
              "internalType": "uint256"
            },
            { "name": "reward", "type": "uint256", "internalType": "uint256" },
            { "name": "finalFee", "type": "uint256", "internalType": "uint256" }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "hasPrice",
      "inputs": [
        { "name": "requester", "type": "address", "internalType": "address" },
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposePrice",
      "inputs": [
        { "name": "requester", "type": "address", "internalType": "address" },
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" },
        { "name": "proposedPrice", "type": "int256", "internalType": "int256" }
      ],
      "outputs": [
        { "name": "totalBond", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "requestPrice",
      "inputs": [
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" },
        {
          "name": "currency",
          "type": "address",
          "internalType": "contract IERC20"
        },
        { "name": "reward", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "totalBond", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setBond",
      "inputs": [
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" },
        { "name": "bond", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "totalBond", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCallbacks",
      "inputs": [
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" },
        {
          "name": "callbackOnPriceProposed",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "callbackOnPriceDisputed",
          "type": "bool",
          "internalType": "bool"
        },
        {
          "name": "callbackOnPriceSettled",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setCustomLiveness",
      "inputs": [
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" },
        {
          "name": "customLiveness",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setEventBased",
      "inputs": [
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "settle",
      "inputs": [
        { "name": "requester", "type": "address", "internalType": "address" },
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [
        { "name": "payout", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "settleAndGetPrice",
      "inputs": [
        { "name": "identifier", "type": "bytes32", "internalType": "bytes32" },
        { "name": "timestamp", "type": "uint256", "internalType": "uint256" },
        { "name": "ancillaryData", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [{ "name": "", "type": "int256", "internalType": "int256" }],
      "stateMutability": "nonpayable"
    }
  ],
  "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "methodIdentifiers": {
    "defaultLiveness()": "fe4e1983",
    "disputePrice(address,bytes32,uint256,bytes)": "fba7f1e3",
    "getRequest(address,bytes32,uint256,bytes)": "a9904f9b",
    "hasPrice(address,bytes32,uint256,bytes)": "bc58ccaa",
    "proposePrice(address,bytes32,uint256,bytes,int256)": "b8b4f908",
    "requestPrice(bytes32,uint256,bytes,address,uint256)": "11df92f1",
    "setBond(bytes32,uint256,bytes,uint256)": "ad5a755a",
    "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": "f327b075",
    "setCustomLiveness(bytes32,uint256,bytes,uint256)": "473c45fe",
    "setEventBased(bytes32,uint256,bytes)": "120698af",
    "settle(address,bytes32,uint256,bytes)": "5e9a79a9",
    "settleAndGetPrice(bytes32,uint256,bytes)": "53b59239"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"defaultLiveness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"disputePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"eventBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundOnDispute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"requestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"setBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"}],\"name\":\"setCallbacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"name\":\"setCustomLiveness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"setEventBased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"settleAndGetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"disputePrice(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).\"}},\"getRequest(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"the Request data structure.\"}},\"hasPrice(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"true if price has resolved or settled, false otherwise.\"}},\"proposePrice(address,bytes32,uint256,bytes,int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"requestPrice(bytes32,uint256,bytes,address,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data representing additional args being passed with the price request.\",\"currency\":\"ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\",\"identifier\":\"price identifier being requested.\",\"reward\":\"reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.\",\"timestamp\":\"timestamp of the price being requested.\"},\"returns\":{\"totalBond\":\"default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond().\"}},\"setBond(bytes32,uint256,bytes,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"bond\":\"custom bond amount to set.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond().\"}},\"setCallbacks(bytes32,uint256,bytes,bool,bool,bool)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"callbackOnPriceDisputed\":\"whether to enable the callback onPriceDisputed.\",\"callbackOnPriceProposed\":\"whether to enable the callback onPriceProposed.\",\"callbackOnPriceSettled\":\"whether to enable the callback onPriceSettled.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setCustomLiveness(bytes32,uint256,bytes,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"customLiveness\":\"new custom liveness.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setEventBased(bytes32,uint256,bytes)\":{\"details\":\"Calling this method has a few impacts on the request: 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated    with the request. 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who    prematurely proposes a response loses their bond. 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to    the requesting contract.\",\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"settle(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"payout\":\"the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.\"}},\"settleAndGetPrice(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"resolved price.\"}}},\"title\":\"Optimistic Oracle V2 Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disputePrice(address,bytes32,uint256,bytes)\":{\"notice\":\"Disputes a price value for an existing price request with an active proposal.\"},\"getRequest(address,bytes32,uint256,bytes)\":{\"notice\":\"Gets the current data structure containing all information about a price request.\"},\"hasPrice(address,bytes32,uint256,bytes)\":{\"notice\":\"Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\"},\"proposePrice(address,bytes32,uint256,bytes,int256)\":{\"notice\":\"Proposes a price value for an existing price request.\"},\"requestPrice(bytes32,uint256,bytes,address,uint256)\":{\"notice\":\"Requests a new price.\"},\"setBond(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Set the proposal bond associated with a price request.\"},\"setCallbacks(bytes32,uint256,bytes,bool,bool,bool)\":{\"notice\":\"Sets which callbacks should be enabled for the request.\"},\"setCustomLiveness(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.\"},\"setEventBased(bytes32,uint256,bytes)\":{\"notice\":\"Sets the request to be an \\\"event-based\\\" request.\"},\"settle(address,bytes32,uint256,bytes)\":{\"notice\":\"Attempts to settle an outstanding price request. Will revert if it isn't settleable.\"},\"settleAndGetPrice(bytes32,uint256,bytes)\":{\"notice\":\"Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/uma-ctf-adapter/src/interfaces/IOptimisticOracleV2.sol\":\"IOptimisticOracleV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/uma-ctf-adapter/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/uma-ctf-adapter/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/uma-ctf-adapter/lib/openzeppelin-contracts/\",\":solmate/=lib/uma-ctf-adapter/lib/solmate/src/\",\":uma-ctf-adapter/=lib/uma-ctf-adapter/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/uma-ctf-adapter/src/interfaces/IOptimisticOracleV2.sol\":{\"keccak256\":\"0xd053315050236c368c22b354eef1e607c3c8e6278a6e8c6f9c51ec0d3df234bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c9ea1de0ce27bdf0bf56a7e6732c8eb4bbe3c79e39d3b6898d78decbabcfd2db\",\"dweb:/ipfs/QmShPd5TVZ3r5y5EW2gZFSpryx2fSbYmANUQME4h2242VA\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.15+commit.e14f2714" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "defaultLiveness",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "disputePrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "totalBond",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRequest",
          "outputs": [
            {
              "internalType": "struct Request",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "proposer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "disputer",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "currency",
                  "type": "address"
                },
                { "internalType": "bool", "name": "settled", "type": "bool" },
                {
                  "internalType": "struct RequestSettings",
                  "name": "requestSettings",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "eventBased",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "refundOnDispute",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "callbackOnPriceProposed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "callbackOnPriceDisputed",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "callbackOnPriceSettled",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "bond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "customLiveness",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "int256",
                  "name": "proposedPrice",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "resolvedPrice",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "finalFee",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasPrice",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "proposePrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "totalBond",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            { "internalType": "uint256", "name": "reward", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "requestPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "totalBond",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            { "internalType": "uint256", "name": "bond", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setBond",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "totalBond",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceProposed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceDisputed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceSettled",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCallbacks"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "customLiveness",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setCustomLiveness"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setEventBased"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "settle",
          "outputs": [
            { "internalType": "uint256", "name": "payout", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "settleAndGetPrice",
          "outputs": [
            { "internalType": "int256", "name": "", "type": "int256" }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "disputePrice(address,bytes32,uint256,bytes)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "requester": "sender of the initial price request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": {
              "totalBond": "the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
            }
          },
          "getRequest(address,bytes32,uint256,bytes)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "requester": "sender of the initial price request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": { "_0": "the Request data structure." }
          },
          "hasPrice(address,bytes32,uint256,bytes)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "requester": "sender of the initial price request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": {
              "_0": "true if price has resolved or settled, false otherwise."
            }
          },
          "proposePrice(address,bytes32,uint256,bytes,int256)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "proposedPrice": "price being proposed.",
              "requester": "sender of the initial price request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": {
              "totalBond": "the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
            }
          },
          "requestPrice(bytes32,uint256,bytes,address,uint256)": {
            "params": {
              "ancillaryData": "ancillary data representing additional args being passed with the price request.",
              "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
              "identifier": "price identifier being requested.",
              "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
              "timestamp": "timestamp of the price being requested."
            },
            "returns": {
              "totalBond": "default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond()."
            }
          },
          "setBond(bytes32,uint256,bytes,uint256)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "bond": "custom bond amount to set.",
              "identifier": "price identifier to identify the existing request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": {
              "totalBond": "new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond()."
            }
          },
          "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "callbackOnPriceDisputed": "whether to enable the callback onPriceDisputed.",
              "callbackOnPriceProposed": "whether to enable the callback onPriceProposed.",
              "callbackOnPriceSettled": "whether to enable the callback onPriceSettled.",
              "identifier": "price identifier to identify the existing request.",
              "timestamp": "timestamp to identify the existing request."
            }
          },
          "setCustomLiveness(bytes32,uint256,bytes,uint256)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "customLiveness": "new custom liveness.",
              "identifier": "price identifier to identify the existing request.",
              "timestamp": "timestamp to identify the existing request."
            }
          },
          "setEventBased(bytes32,uint256,bytes)": {
            "details": "Calling this method has a few impacts on the request: 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated    with the request. 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who    prematurely proposes a response loses their bond. 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to    the requesting contract.",
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "timestamp": "timestamp to identify the existing request."
            }
          },
          "settle(address,bytes32,uint256,bytes)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "requester": "sender of the initial price request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": {
              "payout": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards."
            }
          },
          "settleAndGetPrice(bytes32,uint256,bytes)": {
            "params": {
              "ancillaryData": "ancillary data of the price being requested.",
              "identifier": "price identifier to identify the existing request.",
              "timestamp": "timestamp to identify the existing request."
            },
            "returns": { "_0": "resolved price." }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "disputePrice(address,bytes32,uint256,bytes)": {
            "notice": "Disputes a price value for an existing price request with an active proposal."
          },
          "getRequest(address,bytes32,uint256,bytes)": {
            "notice": "Gets the current data structure containing all information about a price request."
          },
          "hasPrice(address,bytes32,uint256,bytes)": {
            "notice": "Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price)."
          },
          "proposePrice(address,bytes32,uint256,bytes,int256)": {
            "notice": "Proposes a price value for an existing price request."
          },
          "requestPrice(bytes32,uint256,bytes,address,uint256)": {
            "notice": "Requests a new price."
          },
          "setBond(bytes32,uint256,bytes,uint256)": {
            "notice": "Set the proposal bond associated with a price request."
          },
          "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": {
            "notice": "Sets which callbacks should be enabled for the request."
          },
          "setCustomLiveness(bytes32,uint256,bytes,uint256)": {
            "notice": "Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved."
          },
          "setEventBased(bytes32,uint256,bytes)": {
            "notice": "Sets the request to be an \"event-based\" request."
          },
          "settle(address,bytes32,uint256,bytes)": {
            "notice": "Attempts to settle an outstanding price request. Will revert if it isn't settleable."
          },
          "settleAndGetPrice(bytes32,uint256,bytes)": {
            "notice": "Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/uma-ctf-adapter/lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/uma-ctf-adapter/lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/uma-ctf-adapter/lib/openzeppelin-contracts/",
        "solmate/=lib/uma-ctf-adapter/lib/solmate/src/",
        "uma-ctf-adapter/=lib/uma-ctf-adapter/src/"
      ],
      "optimizer": { "enabled": true, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": {
        "lib/uma-ctf-adapter/src/interfaces/IOptimisticOracleV2.sol": "IOptimisticOracleV2"
      },
      "evmVersion": "london",
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/uma-ctf-adapter/src/interfaces/IOptimisticOracleV2.sol": {
        "keccak256": "0xd053315050236c368c22b354eef1e607c3c8e6278a6e8c6f9c51ec0d3df234bb",
        "urls": [
          "bzz-raw://c9ea1de0ce27bdf0bf56a7e6732c8eb4bbe3c79e39d3b6898d78decbabcfd2db",
          "dweb:/ipfs/QmShPd5TVZ3r5y5EW2gZFSpryx2fSbYmANUQME4h2242VA"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 48
}
